{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            _context.next = 3;\n            return fetch(\"https://customer.50d.top/graphql\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 10;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error('Failed to fetch API');\n\n          case 10:\n            return _context.abrupt(\"return\", json.data);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getArticles() {\n  return _getArticles.apply(this, arguments);\n}\n\nfunction _getArticles() {\n  _getArticles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // const data = await fetchAPI(`query Articles {\n            //   articles {\n            //     id\n            //     title\n            //     category {\n            //       id\n            //       name\n            //     }\n            //     image {\n            //       url\n            //     }\n            //   }\n            // }`)\n            debugger;\n            data = {\n              articles: []\n            };\n            return _context2.abrupt(\"return\", data.articles);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getArticles.apply(this, arguments);\n}\n\nexport function getArticle(_x2) {\n  return _getArticle.apply(this, arguments);\n}\n\nfunction _getArticle() {\n  _getArticle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // const data = await fetchAPI(\n            //   `query Articles($id: ID!) {\n            //   article(id: $id) {\n            //     id\n            //     title\n            //     content\n            //     image {\n            //       url\n            //     }\n            //     category {\n            //       id\n            //       name\n            //     }\n            //     published_at\n            //   }\n            // }`,\n            //   { variables: { id } }\n            // )\n            data = {\n              article: []\n            };\n            return _context3.abrupt(\"return\", data.article);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getArticle.apply(this, arguments);\n}\n\nexport function getCategories() {\n  return _getCategories.apply(this, arguments);\n}\n\nfunction _getCategories() {\n  _getCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            // const data = await fetchAPI(`query Categories {\n            //   categories {\n            //     id\n            //     name\n            //   }\n            // }`)\n            data = {\n              categories: []\n            };\n            return _context4.abrupt(\"return\", data.categories);\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getCategories.apply(this, arguments);\n}\n\nexport function getCategory(_x3) {\n  return _getCategory.apply(this, arguments);\n}\n\nfunction _getCategory() {\n  _getCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            //   const data = await fetchAPI(\n            //     `query Category($id: ID!) {\n            //     category(id: $id) {\n            //       id\n            //       name\n            //       articles {\n            //         id\n            //         title\n            //         content\n            //         image {\n            //           url\n            //         }\n            //         category {\n            //           id\n            //           name\n            //         }\n            //       }\n            //     }\n            //   }\n            // `,\n            //     { variables: { id } }\n            //   )\n            data = {\n              category: []\n            };\n            return _context5.abrupt(\"return\", data.category);\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getCategory.apply(this, arguments);\n}\n\nexport function getProductsByDomainAndCat(_x4, _x5) {\n  return _getProductsByDomainAndCat.apply(this, arguments);\n}\n\nfunction _getProductsByDomainAndCat() {\n  _getProductsByDomainAndCat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(domain, product_identify_cat) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return fetchAPI(\"query Websiteseometas($where: JSON) {\\n    websiteseometas(where:$where, limit: -1) {\\n      title\\n      slug\\n      product_identify_cat\\n      domain{\\n        name\\n      }\\n      commonproduct{\\n        model\\n        volumn\\n      }\\n    }\\n  }\", {\n              variables: {\n                \"where\": {\n                  \"domain\": {\n                    \"name\": domain\n                  },\n                  \"product_identify_cat\": product_identify_cat\n                }\n              }\n            });\n\n          case 2:\n            data = _context6.sent;\n            debugger;\n            return _context6.abrupt(\"return\", data.websiteseometas);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getProductsByDomainAndCat.apply(this, arguments);\n}\n\nexport function getProductCategory(_x6) {\n  return _getProductCategory.apply(this, arguments);\n}\n\nfunction _getProductCategory() {\n  _getProductCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return fetchAPI(\"query Category($id: ID!) {\\n    category(id: $id) {\\n      id\\n      name\\n      articles {\\n        id\\n        title\\n        content\\n        image {\\n          url\\n        }\\n        category {\\n          id\\n          name\\n        }\\n      }\\n    }\\n  }\\n\", {\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            data = _context7.sent;\n            return _context7.abrupt(\"return\", data.category);\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getProductCategory.apply(this, arguments);\n}","map":{"version":3,"sources":["D:/projects/strapi/strapi-starter-next-blog/frontend/lib/api.js"],"names":["fetchAPI","query","variables","fetch","method","headers","body","JSON","stringify","res","json","errors","console","error","Error","data","getArticles","articles","getArticle","id","article","getCategories","categories","getCategory","category","getProductsByDomainAndCat","domain","product_identify_cat","websiteseometas","getProductCategory"],"mappings":"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","sourcesContent":["async function fetchAPI(query, { variables } = {}) {\r\n  const res = await fetch(`https://customer.50d.top/graphql`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      query,\r\n      variables,\r\n    }),\r\n  })\r\n\r\n  const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Failed to fetch API')\r\n  }\r\n\r\n  return json.data\r\n}\r\n\r\nexport async function getArticles() {\r\n  // const data = await fetchAPI(`query Articles {\r\n  //   articles {\r\n  //     id\r\n  //     title\r\n  //     category {\r\n  //       id\r\n  //       name\r\n  //     }\r\n  //     image {\r\n  //       url\r\n  //     }\r\n  //   }\r\n  // }`)\r\n  debugger\r\n  const data={\r\n    articles: []\r\n  }\r\n  return data.articles\r\n}\r\n\r\nexport async function getArticle(id) {\r\n  // const data = await fetchAPI(\r\n  //   `query Articles($id: ID!) {\r\n  //   article(id: $id) {\r\n  //     id\r\n  //     title\r\n  //     content\r\n  //     image {\r\n  //       url\r\n  //     }\r\n  //     category {\r\n  //       id\r\n  //       name\r\n  //     }\r\n  //     published_at\r\n  //   }\r\n  // }`,\r\n  //   { variables: { id } }\r\n  // )\r\n  const data={\r\n    article: []\r\n  }\r\n\r\n  return data.article\r\n}\r\n\r\nexport async function getCategories() {\r\n  // const data = await fetchAPI(`query Categories {\r\n  //   categories {\r\n  //     id\r\n  //     name\r\n  //   }\r\n  // }`)\r\n  const data={\r\n    categories: []\r\n  }\r\n  return data.categories\r\n}\r\n\r\nexport async function getCategory(id) {\r\n//   const data = await fetchAPI(\r\n//     `query Category($id: ID!) {\r\n//     category(id: $id) {\r\n//       id\r\n//       name\r\n//       articles {\r\n//         id\r\n//         title\r\n//         content\r\n//         image {\r\n//           url\r\n//         }\r\n//         category {\r\n//           id\r\n//           name\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `,\r\n//     { variables: { id } }\r\n//   )\r\n  const data={\r\n    category: []\r\n  }\r\n\r\n  return data.category\r\n}\r\n\r\n\r\nexport async function getProductsByDomainAndCat( domain, product_identify_cat) {\r\n  const data = await fetchAPI(`query Websiteseometas($where: JSON) {\r\n    websiteseometas(where:$where, limit: -1) {\r\n      title\r\n      slug\r\n      product_identify_cat\r\n      domain{\r\n        name\r\n      }\r\n      commonproduct{\r\n        model\r\n        volumn\r\n      }\r\n    }\r\n  }`,\r\n  { variables: { \"where\": {\"domain\":{\"name\": domain}, \"product_identify_cat\": product_identify_cat}} }\r\n  )\r\n  debugger\r\n  return data.websiteseometas\r\n}\r\n\r\nexport async function getProductCategory(id) {\r\n  const data = await fetchAPI(\r\n    `query Category($id: ID!) {\r\n    category(id: $id) {\r\n      id\r\n      name\r\n      articles {\r\n        id\r\n        title\r\n        content\r\n        image {\r\n          url\r\n        }\r\n        category {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`,\r\n    { variables: { id } }\r\n  )\r\n  return data.category\r\n}"]},"metadata":{},"sourceType":"module"}